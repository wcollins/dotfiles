#!/usr/bin/env bash
# torero secrets injection script
# fetch secrets from 1password via `op cli` and inject them into torero container at runtime

set -e

# configuration
CONTAINER_NAME=""
PROFILES=()
ENCRYPTION_KEY_PATH="/home/admin/.torero.d/encryption.key"
TORERO_CONF_PATH="/home/admin/.torero.d/torero.conf"

# colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # no color

# logging functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# select profiles for secret injection
select_profiles() {
    echo -e "\n${GREEN}Profile Selection:${NC}"
    echo "=================="
    echo -n "Enter profiles as comma-separated list (e.g., aws,azure,netbox): "
    read -r profile_input
    
    # validate input
    if [ -z "$profile_input" ]; then
        log_error "No profiles specified"
        exit 1
    fi
    
    # convert comma-separated string to array
    IFS=',' read -ra PROFILES <<< "$profile_input"
    
    # trim whitespace from each profile
    for i in "${!PROFILES[@]}"; do
        PROFILES[$i]=$(echo "${PROFILES[$i]}" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    done
    
    log_info "Selected profiles: ${GREEN}$(IFS=,; echo "${PROFILES[*]}")${NC}"
}

# select container from running containers
select_container() {
    log_info "Querying running containers..."
    
    # get list of running containers
    readarray -t containers < <(docker ps --format '{{.Names}}' | sort)
    
    if [ ${#containers[@]} -eq 0 ]; then
        log_error "No running containers found"
        log_info "Please start a container first"
        exit 1
    fi
    
    if [ ${#containers[@]} -eq 1 ]; then
        CONTAINER_NAME="${containers[0]}"
        log_info "Found only one running container: ${GREEN}${CONTAINER_NAME}${NC}"
        echo -n "Use this container? (Y/n): "
        read -r response
        if [[ "$response" =~ ^[Nn]$ ]]; then
            log_info "Exiting..."
            exit 0
        fi
    else
        echo -e "\n${GREEN}Available running containers:${NC}"
        echo "=============================="
        
        # display numbered list
        for i in "${!containers[@]}"; do
            printf "%2d) %s\n" $((i+1)) "${containers[$i]}"
        done
        
        echo "=============================="
        echo -n "Select container number (1-${#containers[@]}), or 'q' to quit: "
        read -r selection
        
        # handle quit
        if [[ "$selection" == "q" || "$selection" == "Q" ]]; then
            log_info "Exiting..."
            exit 0
        fi
        
        # validate selection
        if ! [[ "$selection" =~ ^[0-9]+$ ]]; then
            log_error "Invalid selection: must be a number"
            exit 1
        fi
        
        if [ "$selection" -lt 1 ] || [ "$selection" -gt "${#containers[@]}" ]; then
            log_error "Invalid selection: must be between 1 and ${#containers[@]}"
            exit 1
        fi
        
        # set container name
        CONTAINER_NAME="${containers[$((selection-1))]}"
        log_info "Selected container: ${GREEN}${CONTAINER_NAME}${NC}"
    fi
}

# check if container is running
check_container() {
    if ! docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
        log_error "Selected container ${CONTAINER_NAME} is no longer running"
        exit 1
    fi
}

# execute command in container as admin
exec_in_container() {
    docker exec -u admin "${CONTAINER_NAME}" bash -c "$1"
}

# create torero.d directory if it doesn't exist
setup_torero_dir() {
    log_info "setting up torero configuration directory..."
    exec_in_container "mkdir -p /home/admin/.torero.d && chmod 700 /home/admin/.torero.d"
}

# generate encryption key in container
generate_encryption_key() {

    # check if encryption key already exists
    if exec_in_container "test -f ${ENCRYPTION_KEY_PATH}" 2>/dev/null; then
        log_info "encryption key already exists at ${ENCRYPTION_KEY_PATH}, skipping generation..."

        # are permissions correct?
        exec_in_container "chmod 400 ${ENCRYPTION_KEY_PATH}"
    else
        log_info "generating new encryption key..."
        exec_in_container "openssl rand -base64 256 > ${ENCRYPTION_KEY_PATH} && chmod 400 ${ENCRYPTION_KEY_PATH}"
    fi
}

# create or update torero.conf with encryption key configuration
create_torero_conf() {
    log_info "configuring torero.conf..."
    
    # does torero.conf exist?
    if exec_in_container "test -f ${TORERO_CONF_PATH}" 2>/dev/null; then
        log_info "torero.conf exists, checking for secrets section..."
        
        # does [secrets] section exists?
        if exec_in_container "grep -q '^\[secrets\]' ${TORERO_CONF_PATH}" 2>/dev/null; then

            # check if encrypt_key_file already exists in secrets section
            if exec_in_container "grep -q '^encrypt_key_file' ${TORERO_CONF_PATH}" 2>/dev/null; then
                log_info "updating existing encrypt_key_file configuration..."

                # update the existing line
                exec_in_container "sed -i 's|^encrypt_key_file.*|encrypt_key_file = \"${ENCRYPTION_KEY_PATH}\"|' ${TORERO_CONF_PATH}"
            else
                log_info "adding encrypt_key_file to existing [secrets] section..."

                # add encrypt_key_file under [secrets] section
                exec_in_container "sed -i '/^\[secrets\]/a encrypt_key_file = \"${ENCRYPTION_KEY_PATH}\"' ${TORERO_CONF_PATH}"
            fi
        else
            log_info "appending [secrets] section to existing torero.conf..."

            # append secrets section to existing file
            exec_in_container "cat >> ${TORERO_CONF_PATH} << 'EOF'

[secrets]
encrypt_key_file = \"${ENCRYPTION_KEY_PATH}\"
EOF"
        fi
    else
        log_info "torero.conf does not exist, creating new configuration..."

        # create new configuration file
        exec_in_container "cat > ${TORERO_CONF_PATH} << 'EOF'
[application]
mode = local

[secrets]
encrypt_key_file = \"${ENCRYPTION_KEY_PATH}\"
EOF"
    fi
    
    # set permissions
    exec_in_container "chmod 600 ${TORERO_CONF_PATH}"
}

# fetch secrets from 1password and create them in torero
inject_secrets() {
    log_info "fetching and injecting secrets from 1password..."
    
    local total_secrets=0
    local created_secrets=0
    
    # loop through each profile
    for profile in "${PROFILES[@]}"; do
        log_info "processing profile: $profile"
        
        # capture env vars for this profile
        if output=$(op item get "$profile" --vault secrets --format json 2>/dev/null); then
            
            # parse the secrets
            secrets=$(echo "$output" | jq -r '.fields | map(select(has("value"))) | .[] | @base64')
            
            # process each secret
            for secret in $secrets; do

                # decode the secret
                decoded=$(echo "$secret" | base64 -d)
                
                # extract label and value
                label=$(echo "$decoded" | jq -r '.label')
                value=$(echo "$decoded" | jq -r '.value')
                
                if [ -n "$label" ] && [ -n "$value" ]; then
                    total_secrets=$((total_secrets + 1))
                    
                    # create lowercase secret name
                    secret_name=$(echo "${label}" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
                    
                    log_info "creating secret: $secret_name"
                    
                    # create the secret in torero
                    # use --value flag with proper escaping
                    if exec_in_container "torero create secret ${secret_name} --value '${value}' 2>/dev/null"; then
                        created_secrets=$((created_secrets + 1))
                    else

                        # try to delete and recreate if it already exists
                        if exec_in_container "torero delete secret ${secret_name} 2>/dev/null"; then
                            if exec_in_container "torero create secret ${secret_name} --value '${value}' 2>/dev/null"; then
                                created_secrets=$((created_secrets + 1))
                            else
                                log_warning "failed to create secret: $secret_name"
                            fi
                        else
                            log_warning "failed to create/update secret: $secret_name"
                        fi
                    fi
                fi
            done
        else
            log_warning "could not fetch secrets for profile: $profile"
        fi
    done
    
    log_info "created $created_secrets out of $total_secrets secrets"
}

# verify secrets were created
verify_secrets() {
    log_info "verifying secrets creation..."
    
    # list all secrets
    if secrets_list=$(exec_in_container "torero get secrets 2>/dev/null"); then
        echo "$secrets_list"
        log_info "secrets verification complete"
    else
        log_warning "could not list secrets - this may be normal if no secrets exist yet"
    fi
}

# main execution
main() {
    log_info "starting torero secrets injection process..."
    
    # check prerequisites
    if ! command -v op &> /dev/null; then
        log_error "1password cli (op) is not installed"
        exit 1
    fi
    
    if ! command -v jq &> /dev/null; then
        log_error "jq is not installed"
        exit 1
    fi
    
    # check if signed in to 1password
    if ! op account list &> /dev/null; then
        log_error "not signed in to 1password. please run: eval \$(op signin)"
        exit 1
    fi
    
    # run the injection process
    select_profiles
    select_container
    check_container
    setup_torero_dir
    generate_encryption_key
    create_torero_conf
    inject_secrets
    verify_secrets
    
    log_info "secrets injection complete!"
    log_info "secrets are now available in the torero container"
    log_info "to use a secret in a service, use: --secret name=<secret-name>,type=env,target=<ENV_VAR_NAME>"
}

# run main function
main "$@"
